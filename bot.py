import os
import logging
import threading
import json
from datetime import datetime, timedelta
from flask import Flask
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

app = Flask(__name__)

@app.route('/')
def home():
    return "Nutrition Bot is running!", 200

def run_flask():
    if os.environ.get('RENDER'):
        os.environ['WERKZEUG_RUN_MAIN'] = 'true'
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
user_storage = {}

def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    user_id = user.id
    user_name = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_storage:
        user_storage[user_id] = {
            "name": user_name,
            "joined_date": datetime.now().isoformat(),
            "trial_ends": (datetime.now() + timedelta(days=3)).isoformat()
        }
    
    user_data = user_storage[user_id]
    trial_ends = datetime.fromisoformat(user_data['trial_ends'])
    days_left = (trial_ends - datetime.now()).days
    
    message = (
        f"–ü—Ä–∏–≤–µ—Ç {user_name}! üëã\n"
        f"–Ø –±–æ—Ç-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –£ –≤–∞—Å –Ω–∞—á–∞–ª—Å—è –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 3 –¥–Ω—è.\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {max(days_left, 0)}\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ '–º–µ–Ω—é' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –º–µ–Ω—é."
    )
    
    update.message.reply_text(message)

def handle_message(update: Update, context: CallbackContext) -> None:
    text = update.message.text.lower()
    
    if "–º–µ–Ω—é" in text:
        menu_text = """
üçΩÔ∏è –ü–†–û–ë–ù–û–ï –ú–ï–ù–Æ –ù–ê –î–ï–ù–¨:

–ó–ê–í–¢–†–ê–ö: –ë–µ–ª–∫–æ–≤—ã–π –æ–º–ª–µ—Ç
‚Ä¢ 2 —è–π—Ü–∞ + 100–≥ —Ç–≤–æ—Ä–æ–≥–∞ + –æ–≤–æ—â–∏
‚Ä¢ –ö–ë–ñ–£: 320 –∫–∫–∞–ª ‚Ä¢ –ë: 28–≥ ‚Ä¢ –ñ: 18–≥ ‚Ä¢ –£: 12–≥

–û–ë–ï–î: –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å –≥—Ä–µ—á–∫–æ–π  
‚Ä¢ 150–≥ –∫—É—Ä–∏—Ü—ã + 100–≥ –≥—Ä–µ—á–∫–∏ + —Å–∞–ª–∞—Ç
‚Ä¢ –ö–ë–ñ–£: 450 –∫–∫–∞–ª ‚Ä¢ –ë: 35–≥ ‚Ä¢ –ñ: 12–≥ ‚Ä¢ –£: 45–≥

–£–ñ–ò–ù: –†—ã–±–∞ –Ω–∞ –ø–∞—Ä—É —Å –æ–≤–æ—â–∞–º–∏
‚Ä¢ 200–≥ —Ç—Ä–µ—Å–∫–∏ + –±—Ä–æ–∫–∫–æ–ª–∏ + –º–æ—Ä–∫–æ–≤—å
‚Ä¢ –ö–ë–ñ–£: 280 –∫–∫–∞–ª ‚Ä¢ –ë: 25–≥ ‚Ä¢ –ñ: 8–≥ ‚Ä¢ –£: 20–≥

üìã –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
‚Ä¢ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é —Å –Ω–æ–≤—ã–º–∏ –±–ª—é–¥–∞–º–∏
‚Ä¢ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ —Å —ç–∫–æ–Ω–æ–º–∏–µ–π
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
"""
        update.message.reply_text(menu_text)
    else:
        update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ "–º–µ–Ω—é" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –º–µ–Ω—é.')

def main():
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    updater = Updater(BOT_TOKEN, use_context=True)
    dispatcher = updater.dispatcher
    
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
