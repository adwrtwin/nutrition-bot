import os
import logging
import threading
from datetime import datetime, timedelta
from flask import Flask
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from supabase import create_client, Client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask –¥–ª—è Render
app = Flask(__name__)

@app.route('/')
def home():
    return "Nutrition Bot is running!", 200

@app.route('/health')
def health():
    return "OK", 200

def run_flask():
    # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    import os
    if os.environ.get('RENDER'):
        os.environ['WERKZEUG_RUN_MAIN'] = 'true'
    
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
try:
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    logger.info("Supabase client initialized successfully")
except Exception as e:
    logger.error(f"Failed to initialize Supabase client: {e}")
    supabase = None

def save_user_to_supabase(telegram_id, user_name):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase"""
    try:
        if not supabase:
            logger.error("Supabase client not available")
            return None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ
        response = supabase.table("users").select("*").eq("telegram_id", telegram_id).execute()
        
        if len(response.data) > 0:
            logger.info(f"User {telegram_id} already exists in database")
            return response.data[0]
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        trial_ends_at = (datetime.now() + timedelta(days=3)).isoformat()
        new_user = {
            "telegram_id": telegram_id,
            "name": user_name,
            "tariff": "trial",
            "trial_ends_at": trial_ends_at,
            "created_at": datetime.now().isoformat()
        }
        
        result = supabase.table("users").insert(new_user).execute()
        
        if len(result.data) > 0:
            logger.info(f"User {telegram_id} saved to Supabase")
            return result.data[0]
        else:
            logger.error(f"Failed to save user {telegram_id} to Supabase")
            return None
            
    except Exception as e:
        logger.error(f"Error saving user to Supabase: {e}")
        return None

def get_user_from_supabase(telegram_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase"""
    try:
        if not supabase:
            return None
            
        response = supabase.table("users").select("*").eq("telegram_id", telegram_id).execute()
        
        if len(response.data) > 0:
            return response.data[0]
        return None
        
    except Exception as e:
        logger.error(f"Error getting user from Supabase: {e}")
        return None

def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    telegram_id = user.id
    user_name = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
    user_data = save_user_to_supabase(telegram_id, user_name)
    
    if user_data:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ
        trial_ends_at = datetime.fromisoformat(user_data['trial_ends_at'].replace('Z', '+00:00'))
        days_left = (trial_ends_at - datetime.now()).days
        
        if days_left > 0:
            message = (
                f"–ü—Ä–∏–≤–µ—Ç {user_name}! üëã\n"
                f"–Ø –±–æ—Ç-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –£ –≤–∞—Å –Ω–∞—á–∞–ª—Å—è –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 3 –¥–Ω—è.\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
                f"–ù–∞–ø–∏—à–∏—Ç–µ '–º–µ–Ω—é' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –º–µ–Ω—é."
            )
        else:
            message = (
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_name}! ‚è∞\n"
                f"–í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n"
                f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –ø–æ–ª–Ω—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
            )
    else:
        # –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
        message = (
            f"–ü—Ä–∏–≤–µ—Ç {user_name}! üëã\n"
            f"–Ø –±–æ—Ç-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –£ –≤–∞—Å –Ω–∞—á–∞–ª—Å—è –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 3 –¥–Ω—è.\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ '–º–µ–Ω—é' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –º–µ–Ω—é."
        )
    
    update.message.reply_text(message)

def handle_message(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    text = update.message.text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    user_data = get_user_from_supabase(user.id)
    
    if "–º–µ–Ω—é" in text:
        menu_text = """
üçΩÔ∏è –ü–†–û–ë–ù–û–ï –ú–ï–ù–Æ –ù–ê –î–ï–ù–¨:

–ó–ê–í–¢–†–ê–ö: –ë–µ–ª–∫–æ–≤—ã–π –æ–º–ª–µ—Ç
‚Ä¢ 2 —è–π—Ü–∞ + 100–≥ —Ç–≤–æ—Ä–æ–≥–∞ + –æ–≤–æ—â–∏
‚Ä¢ –ö–ë–ñ–£: 320 –∫–∫–∞–ª ‚Ä¢ –ë: 28–≥ ‚Ä¢ –ñ: 18–≥ ‚Ä¢ –£: 12–≥

–û–ë–ï–î: –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å –≥—Ä–µ—á–∫–æ–π  
‚Ä¢ 150–≥ –∫—É—Ä–∏—Ü—ã + 100–≥ –≥—Ä–µ—á–∫–∏ + —Å–∞–ª–∞—Ç
‚Ä¢ –ö–ë–ñ–£: 450 –∫–∫–∞–ª ‚Ä¢ –ë: 35–≥ ‚Ä¢ –ñ: 12–≥ ‚Ä¢ –£: 45–≥

–£–ñ–ò–ù: –†—ã–±–∞ –Ω–∞ –ø–∞—Ä—É —Å –æ–≤–æ—â–∞–º–∏
‚Ä¢ 200–≥ —Ç—Ä–µ—Å–∫–∏ + –±—Ä–æ–∫–∫–æ–ª–∏ + –º–æ—Ä–∫–æ–≤—å
‚Ä¢ –ö–ë–ñ–£: 280 –∫–∫–∞–ª ‚Ä¢ –ë: 25–≥ ‚Ä¢ –ñ: 8–≥ ‚Ä¢ –£: 20–≥

üìã –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
‚Ä¢ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é —Å –Ω–æ–≤—ã–º–∏ –±–ª—é–¥–∞–º–∏
‚Ä¢ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ —Å —ç–∫–æ–Ω–æ–º–∏–µ–π
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
"""
        update.message.reply_text(menu_text)
    else:
        update.message.reply_text('–ü–æ–∫–∞ —è —É–º–µ—é —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–µ–Ω—é. –ù–∞–ø–∏—à–∏—Ç–µ "–º–µ–Ω—é"')

def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    # –°–æ–∑–¥–∞–µ–º Updater (–¥–ª—è –≤–µ—Ä—Å–∏–∏ 13.15)
    updater = Updater(BOT_TOKEN, use_context=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dispatcher = updater.dispatcher
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å Supabase –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π...")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
